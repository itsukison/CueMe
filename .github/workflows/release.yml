name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    environment: cueme

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Create .env for packaged app
        shell: bash
        run: |
          echo "Creating .env file from secrets"
          cat > .env << 'EOF'
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          EOF
          echo "Created .env with keys: $(sed -n 's/=.*/=<redacted>/p' .env | xargs)"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Clean package manager cache
        shell: bash
        run: |
          echo "Cleaning package manager cache..."
          if [ "$RUNNER_OS" == "Windows" ]; then
            if [ -d "node_modules" ]; then
              rm -rf node_modules || true
            fi
            npm cache clean --force || true
          else
            rm -rf node_modules || true
            npm cache clean --force || true
          fi

      - name: Install dependencies
        shell: bash
        run: |
          echo "Installing dependencies with npm..."
          npm ci

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          echo "Installing Linux dependencies for Electron..."
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libxtst6 libatspi2.0-0 libdrm2 libxdamage1 libxrandr2 libgbm1 libxcomposite1 libxcursor1 libxi6 libgtk-3-0
          echo "Linux dependencies installed successfully"

      # macOS code signing will be handled automatically by electron-builder using GitHub secrets
      - name: Verify macOS code signing setup
        if: matrix.platform == 'mac'
        run: |
          echo "Using GitHub secrets for macOS code signing..."
          echo "CSC_LINK is set: ${{ secrets.CSC_LINK != '' }}"
          echo "CSC_KEY_PASSWORD is set: ${{ secrets.CSC_KEY_PASSWORD != '' }}"
          echo "APPLE_ID is set: ${{ secrets.APPLE_ID != '' }}"
          echo "APPLE_APP_SPECIFIC_PASSWORD is set: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD != '' }}"
          echo "APPLE_TEAM_ID is set: ${{ secrets.APPLE_TEAM_ID != '' }}"
          
          # Validate Apple Team ID format
          if [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
            TEAM_ID="${{ secrets.APPLE_TEAM_ID }}"
            if [[ ${#TEAM_ID} -eq 10 && "$TEAM_ID" =~ ^[A-Z0-9]+$ ]]; then
              echo "✅ Apple Team ID format is valid: $TEAM_ID"
            else
              echo "❌ Apple Team ID format is invalid: $TEAM_ID"
              echo "Expected: 10-character alphanumeric string (e.g., ABCD123456)"
              echo "Find your Team ID at: https://developer.apple.com/account/ → Membership → Team ID"
              exit 1
            fi
          else
            echo "❌ APPLE_TEAM_ID secret is not set"
            exit 1
          fi

      - name: Build and release Electron app
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS Code Signing
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # macOS Notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Building and releasing for platform: ${{ matrix.platform }}"
          
          # Run the build script
          echo "Running build script..."
          npm run build
          
          # Run electron-builder with platform-specific arguments
          echo "Running electron-builder..."
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npx electron-builder --mac --publish always
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npx electron-builder --win --publish always
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            npx electron-builder --linux --publish always
          fi
          
          echo "Build and release completed for ${{ matrix.platform }}"

      - name: Debug - List build artifacts
        shell: bash
        run: |
          echo "Listing release directory contents:"
          ls -la release/ || echo "No release directory found"
          echo "Listing all build outputs:"
          find . -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" 2>/dev/null || echo "No build artifacts found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('release/**') != ''
        continue-on-error: true
        with:
          name: release-${{ matrix.os }}
          path: release/
